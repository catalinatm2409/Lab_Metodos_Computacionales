# -*- coding: utf-8 -*-
"""Interpolación_Lagrange.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_1ipG1IFATczH9DDJH2Gqjir8GlVd9rK
"""

import numpy as np
import pandas as pd
import sympy as sy
import matplotlib.pyplot as plt

"""**PUNTO 1**"""

X=np.array([205,210,215])
Y=np.array([1724.3,1907.7,2105.9])
x=sy.symbols('x')

def L0(x,X):
  return (x-X[1])*(x-X[2])/((X[0]-X[1])*(X[0]-X[2]))

def L1(x,X):
  return (x-X[0])*(x-X[2])/((X[1]-X[0])*(X[1]-X[2]))

def L2(x,X):
  return (x-X[0])*(x-X[1])/((X[2]-X[0])*(X[2]-X[1]))

def polinomio(x,X,Y):
  return Y[0]*L0(x,X) + Y[1]*L1(x,X) + Y[2]*L2(x,X)
      
print(polinomio(x,X,Y))
print(sy.expand(polinomio(x,X,Y)))

"""**PUNTO 2**"""

#Método generalizado de calcular los coeficientes Li,
def Li(n,i,x,X):
  rta=1
  for j in range(n):
    if(i!=j):
      rta = rta*(x-X[j])/(X[i]-X[j])
  return rta

#Método generalizado de calcular el polinomio de Lagrange.
def pol(n,x,X,Y):
  rta=0;
  for j in range(n):
    rta += Y[j]*Li(n,j,x,X)
  return rta

datos=pd.read_csv("datos.csv",delimiter=";",header=None, names=["T","P","vf","vg","uf","ufg","ug","hf","hfg","hg","sf","sfg","sg"])
print(datos)

filas = len(datos.axes[0])

T=datos['T'].values
P=datos['P'].values

#Almacena los datos en y de la interpolación en una lista que entra por parámetro, usando el polinomio de Lagrange.
def polarizacion_y(n,X,Y,Z):
  for i in range(n):
    Z[i] = pol(n,X[i],X,Y)

polarizacionP = np.zeros(filas)
polarizacion_y(filas,T,P,polarizacionP)
print("Polarizacion P")
tablaPT=[T,polarizacionP]
print(tablaPT)

"""**PUNTO 3**"""

sg=datos['sg'].values

polarizacionSg = np.zeros(filas)
polarizacion_y(filas,T,sg,polarizacionSg)
print("Polarizacion sg")
tablaSgT=[T,polarizacionSg]
print(tablaSgT)

"""**PUNTO 4**"""

sf=datos['sf'].values

polarizacionSf = np.zeros(filas)
polarizacion_y(filas,T,sf,polarizacionSf)
print("Polarizacion sf")
tablaSfT=[T,polarizacionSf]
print(tablaSfT)

"""**PUNTO 5**"""

plt.plot(tablaPT[0],tablaPT[1],'go--',label='Interpolación')
plt.plot(T,P,'b',label='Exacta')
plt.xlabel('Temperatura [°C]')
plt.ylabel('Presión [kPa]')
plt.title('Interpolación de datos P vs T')
plt.legend(loc='upper left')
plt.show()

plt.plot(tablaSgT[0],tablaSgT[1],'go--',label='Interpolación')
plt.plot(T,sg,'b',label='Exacta')
plt.xlabel('Temperatura [°C]')
plt.ylabel('Entropía [kJ/kg K]')
plt.title('Interpolación de datos sg vs T')
plt.legend(loc='lower left')
plt.show()

plt.plot(tablaSfT[0],tablaSfT[1],'go--',label='Interpolación')
plt.plot(T,sf,'b',label='Exacta')
plt.xlabel('Temperatura [°C]')
plt.ylabel('Entropía [kJ/kg K]')
plt.title('Interpolación de datos sf vs T')
plt.legend(loc='upper left')
plt.show()